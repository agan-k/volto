{"mappings":";;;;;;;;;;;;ACgBA,MAAM,4DAAwB,CAAA,GAAA,oBAAY,EAAkB;IAC1D,aAAa,IAAO,CAAA;YAClB,MAAM;YACN,UAAU;YACV,QAAQ,CAAC;YACT,WAAW;YACX,MAAM;QACR,CAAA;AACF;AAOO,SAAS,0CAAuB,KAA0B;IAC/D,IAAI,YAAE,QAAQ,eAAE,WAAW,EAAE,GAAG;IAEhC,IAAI,MAAM,CAAA,GAAA,cAAM,EACd,IAAO,CAAA;yBACL;QACF,CAAA,GACA;QAAC;KAAY;IAGf,qBACE,gCAAC,4CAAsB,QAAQ;QAAC,OAAO;OACpC;AAGP;AAEO,SAAS;IACd,MAAM,eAAE,WAAW,EAAE,GAAG,CAAA,GAAA,iBAAS,EAAE;IACnC,OAAO;AACT;;;;;;;;;AC/CO,MAAM,0DAAqB,qBAChC;AAGK,MAAM,4CAAiB;IAC5B,MAAM,SAAS,kBAAiB;IAEhC,IAAI,CAAC,QACH,MAAM,IAAI,MAAM;IAGlB,OAAO;AACT;AAOO,MAAM,4CAAsB,CAAC,UAClC,MAAM,YACN,QAAQ,EACiB;IACzB,qBACE,qBAAC,0CAAmB,QAAQ;QAAC,OAAO;OACjC;AAGP;;","sources":["packages/providers/src/index.ts","packages/providers/src/RouterLocation.tsx","packages/providers/src/PloneClient.tsx"],"sourcesContent":["export * from './RouterLocation';\nexport * from './PloneClient';\nexport { FlattenToAppURLProvider, useFlattenToAppURL } from '@plone/components';\n","import React from 'react';\nimport { createContext, ReactNode, useContext, useMemo } from 'react';\n\nexport type AnySearchSchema = {};\nexport interface Location<TSearchObj extends AnySearchSchema = {}> {\n  href: string;\n  pathname: string;\n  search: TSearchObj;\n  searchStr: string;\n  hash: string;\n}\n\ninterface RouterLocation {\n  useLocation: () => Location | undefined;\n}\n\nconst RouterLocationContext = createContext<RouterLocation>({\n  useLocation: () => ({\n    href: '',\n    pathname: '',\n    search: {},\n    searchStr: '',\n    hash: '',\n  }),\n});\n\ninterface RouterLocationProps {\n  useLocation: () => Location | undefined;\n  children: ReactNode;\n}\n\nexport function RouterLocationProvider(props: RouterLocationProps) {\n  let { children, useLocation } = props;\n\n  let ctx = useMemo(\n    () => ({\n      useLocation,\n    }),\n    [useLocation],\n  );\n\n  return (\n    <RouterLocationContext.Provider value={ctx}>\n      {children}\n    </RouterLocationContext.Provider>\n  );\n}\n\nexport function useRouterLocation() {\n  const { useLocation } = useContext(RouterLocationContext);\n  return useLocation();\n}\n","import * as React from 'react';\n\nimport type PloneClient from '@plone/client';\n\nexport const PloneClientContext = React.createContext<PloneClient | undefined>(\n  undefined,\n);\n\nexport const usePloneClient = () => {\n  const client = React.useContext(PloneClientContext);\n\n  if (!client) {\n    throw new Error('No PloneClient set, use PloneClientProvider to set one');\n  }\n\n  return client;\n};\n\nexport type PloneClientProviderProps = {\n  client: PloneClient;\n  children?: React.ReactNode;\n};\n\nexport const PloneClientProvider = ({\n  client,\n  children,\n}: PloneClientProviderProps): JSX.Element => {\n  return (\n    <PloneClientContext.Provider value={client}>\n      {children}\n    </PloneClientContext.Provider>\n  );\n};\n"],"names":[],"version":3,"file":"module.mjs.map"}